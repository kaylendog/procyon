use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(tag = "event", rename_all_fields = "PascalCase")]
pub enum Station {
    BuyAmmo {},
    BuyDrones {},
    CargoDepot {},
    CommunityGoal {},
    CommunityGoalDiscard {},
    CommunityGoalJoin {},
    CommunityGoalReward {},
    CrewAssign {},
    CrewFire {},
    CrewHire {},
    EngineerApply {},
    EngineerContribution {},
    EngineerCraft {},
    EngineerLegacyConvert {},
    EngineerProgress { engineers: Vec<Engineer> },
    FetchRemoteModule {},
    Market {},
    MassModuleStore {},
    MaterialTrade {},
    MissionAbandoned {},
    MissionAccepted {},
    MissionCompleted {},
    MissionFailed {},
    MissionRedirected {},
    ModuleBuy {},
    ModuleRetrieve {},
    ModuleSell {},
    ModuleSellRemote {},
    ModuleStore {},
    ModuleSwap {},
    Outfitting {},
    PayBounties {},
    PayFines {},
    PayLegacyFines {},
    RedeemVoucher {},
    RefuelAll {},
    RefuelPartial {},
    Repair {},
    RepairAll {},
    RestockVehicle {},
    ScientificResearch {},
    SearchAndRescue {},
    SellDrones {},
    SellShipOnRebuy {},
    SetUserShipName {},
    Shipyard {},
    ShipyardBuy {},
    ShipyardNew {},
    ShipyardSell {},
    ShipyardTransfer {},
    ShipyardSwap {},
    StoredModules {},
    StoredShips {},
    TechnologyBroker {},
    ClearImpound {},
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "PascalCase")]
pub struct Engineer {
    pub engineer: String,
    #[serde(rename = "EngineerID")]
    pub engineer_id: i64,
    pub progress: String,
    pub rank_progress: Option<i64>,
    pub rank: Option<i64>,
}
